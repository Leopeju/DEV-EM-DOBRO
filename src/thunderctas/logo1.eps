%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 6.0
%%AI8_CreatorVersion: 9.0
%%For: (Dmitry N Loktionov) (Graphit)
%%Title: (th.eps)
%%CreationDate: 10/4/2001 3:29 PM
%%BoundingBox: 201 324 394 518
%%HiResBoundingBox: 201.2402 324.5762 393.9121 517.248
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 2.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 297 421 297 421
%AI3_TileBox: 0 0 576 756
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: 41 605 2 1588 1078 26 0 1 10 67 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%%AI3_PaperRect:-18 774 594 -18
%%AI3_Margin:18 -14 -18 18
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
4 Bn
%AI5_BeginGradient: (GradientFill 1)
(GradientFill 1) 1 2 Bd
[
0
1
0.9
<
00000000000000000000000101010101010101010102020202020202030303030303040404040405
0505050506060606060707070708080808090909090A0A0A0B0B0B0B0C0C0C0D0D0D0E0E0E0F0F0F
1010101111111212121313141414151515161617171718181919191A1A1B1B1C1C1C1D1D1E1E1F1F
2020202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30313132323333
343435363637373838393A3A3B3B3C3D3D3E3E3F404041414243434445454646474848494A4A4B4C
4C4D4E4E4F5050515252535454555656575859595A5B5B5C5D5E5E5F606061626363646566666768
69696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F80818283848485868788
89898A8B8C8D8E8F8F90919293949596969798999A9B9C9D9E9E9FA0A1A2A3A4A5A6A7A8A8A9AAAB
ACADAEAFB0B1B2B3B4B5B6B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC
>
1 %_Br
[
0 1 0.9 0 1 67 0 %_Bs
0 1 0.9 0.8 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (GradientFill 2)
(GradientFill 2) 0 4 Bd
[
0
0
0
0
1 %_Br
<
33333332323232313131313130303030302F2F2F2F2E2E2E2E2E2D2D2D2D2D2C2C2C2C2B2B2B2B2B
2A2A2A2A2A2929292928282828282727272727262626262525252525242424242423232323222222
22222121212120202020201F1F1F1F1F1E1E1E1E1D1D1D1D1D1C1C1C1C1C1B1B1B1B1A1A1A1A1A19
19191919181818181717171717161616161615151515141414141413131313131212121211111111
11101010100F0F0F0F0F0E0E0E0E0E0D0D0D0D0C0C0C0C0C0B0B0B0B0B0A0A0A0A09090909090808
0808080707070706060606060505050505040404040303030303020202020201010101000000
>
<
4D4C4C4C4B4B4B4A4A4A494949484848474747464646454545444444434343424242424141414040
403F3F3F3E3E3E3D3D3D3C3C3C3B3B3B3A3A3A393939383838383737373636363535353434343333
333232323131313030302F2F2F2E2E2E2E2D2D2D2C2C2C2B2B2B2A2A2A2929292828282727272626
26252525242424242323232222222121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A19
19191818181717171616161515151414141313131212121111111010100F0F0F0F0E0E0E0D0D0D0C
0C0C0B0B0B0A0A0A090909080808070707060606050505050404040303030202020101010000
>
<
EDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6
C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E
9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776
7574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E
4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726
2524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
0.2
0.3
<
F2F1F0EEED
>
0
1 %_Br
[
0 0 0 0 1 50 100 %_Bs
0 0 0 0 1 50 97 %_Bs
0.2 0.3 0.93 0 1 50 44 %_Bs
0.2 0.3 0.95 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 5)
(Unnamed gradient 5) 0 2 Bd
[
<
CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5
A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D
7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D
2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605
0403020100
>
0
0
0
1 %_Br
[
0 0 0 0 1 50 100 %_Bs
0.8 0 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 6)
(Unnamed gradient 6) 0 2 Bd
[
<
CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5
A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D
7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D
2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605
0403020100
>
0
0
0
1 %_Br
[
0 0 0 0 1 50 100 %_Bs
0.8 0 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
0 O
0 0 0 0 k
0 J 0 j 1 w 4 M []0 d1 XR
201.2402 324.5762 m
393.9121 324.5762 L
393.9121 517.248 L
201.2402 517.248 L
201.2402 324.5762 L
f0 R
0 0 0 1 K
1 J 1 j 0.5 w226.6563 401.4722 m
239.04 401.4722 249.1919 411.6958 249.1919 424.1519 c
249.1919 436.6802 239.04 446.9038 226.6563 446.9038 c
214.2002 446.9038 204.0479 436.6802 204.0479 424.1519 c
204.0479 411.6958 214.2002 401.4722 226.6563 401.4722 c
Bb
0 0 0 0 Bh
1 (GradientFill 1) 234 429 0 40.7001 1 0 0 1 0 0 Bg
40.7001 0 0 -40.7001 234 429 Bm
b2 BB
*u
0.843 w0 g
241.5601 394.9199 m
244.3682 395.208 249.5518 397.8721 249.5518 402.624 c
249.5518 432.144 L
250.9199 431.6401 L
250.9199 436.3198 L
255.6001 436.6802 259.8481 435.96 263.6641 434.3042 C
257.1841 440.7842 250.1279 444.4561 242.3521 445.248 C
245.1602 444.0239 247.6802 442.4399 249.7681 440.2798 C
248.1118 441.0718 246.312 441.4321 244.5122 441.4321 C
246.168 440.5679 247.4639 439.6318 248.1841 438.48 C
243.2158 438.48 L
244.2241 437.3999 245.376 436.3198 245.4482 435.168 C
245.4482 409.9678 L
246.6001 410.5439 L
245.8799 407.3042 244.6563 404.6401 242.9282 402.48 C
246.0239 403.9922 L
245.52 400.5361 244.0078 397.5122 241.5601 394.9199 C
241.5601 394.9199 L
f0 g
310.4639 405.936 m
310.4639 427.6079 L
308.2319 429.5518 L
317.4482 429.5518 L
319.5361 424.728 L
316.2959 426.96 L
312.2642 426.96 L
314.3521 424.7998 L
314.3521 419.5439 L
315.8643 419.5439 L
317.8799 421.3438 L
317.8799 417.6001 L
314.208 417.6001 L
314.208 410.1118 L
316.2959 410.1118 L
319.3921 413.6401 L
319.248 411.48 318.7441 408.0239 317.4482 405.2158 c
316.2241 402.4082 314.1357 400.248 311.6162 400.104 c
310.5361 400.0322 309.168 400.1758 307.8721 401.04 C
310.6802 400.896 311.7598 401.4722 313.272 403.7759 C
306.8643 403.7759 L
310.4639 405.936 L
310.4639 405.936 L
f0 g
336.4561 435.5278 m
342.6479 435.5278 L
339.1919 437.3281 335.0879 438.8398 330.9121 439.4878 C
333.792 440.4961 337.3198 441.144 340.7041 441.0718 c
342.8643 441.0718 345.0239 440.856 346.8242 440.064 C
345.0962 439.7759 L
344.2319 439.272 L
349.7041 436.752 354.5278 432.2881 355.248 426.0962 C
354.0239 428.6162 351.792 431.856 348.5518 431.7119 c
344.7358 431.5679 340.2002 425.1602 340.272 420.2642 c
340.272 418.104 340.9922 415.9438 341.6401 414 C
340.1279 415.4399 339.1919 416.2319 338.5439 418.248 C
338.5439 409.8242 343.584 399.0239 352.0801 398.4482 c
356.5439 398.1602 359.1357 400.1758 362.6641 403.272 C
359.6401 399.0239 357.0479 397.0801 351.2881 396.936 c
340.7759 396.792 332.2798 406.1519 332.4961 417.312 c
332.6401 423.7202 335.1602 428.04 339.48 432.7202 C
336.4561 435.5278 L
336.4561 435.5278 L
f1 D
0 g
358.9922 428.2559 m
360 429.624 360.936 430.9922 362.376 431.2798 c
362.8799 431.4238 363.5278 431.4238 364.248 431.1357 C
364.248 400.8242 L
372.312 400.8242 L
370.2241 402.0479 369 402.9839 368.2798 405.4321 C
368.2798 431.4961 L
371.6641 431.4961 L
371.9521 429.1201 371.5918 427.0322 370.6563 425.1602 C
373.6079 427.5361 374.688 429.48 374.9038 433.2959 C
363.168 433.2959 L
362.3042 434.8081 362.9521 435.8159 363.8159 437.1841 C
360.936 435.0239 359.4238 431.7842 358.9922 428.2559 C
358.9922 428.2559 L
f0 D
0 g
375.9121 430.5601 m
387.3599 430.5601 L
385.1279 429.0479 L
385.9922 429.3359 386.9282 429.4082 387.8643 429.2642 c
390.168 428.9761 391.4639 423.4321 390.96 420.9121 C
390.0962 422.9282 389.7358 427.4639 384.2642 427.5361 c
382.3198 427.5361 379.1519 424.5122 376.7041 421.8481 C
379.1519 421.3438 381.6001 419.3281 383.5439 417.6719 C
383.6162 418.896 383.3281 419.5439 382.9678 420.6958 C
387 417.4561 388.7998 414.5762 388.3682 409.6079 c
387.7202 402.9839 384.0479 396.936 376.7041 396.8643 c
373.4639 396.792 371.2319 398.0161 369.6479 400.4639 C
370.8721 399.5278 373.5361 397.5122 376.7759 398.0161 c
381.0239 398.5918 384.0479 402.6958 384.0479 407.2319 c
384.0479 411.2642 379.728 415.584 376.0562 416.6641 C
375.48 414.8643 376.272 413.4961 377.2798 411.9839 C
374.5439 414.0718 372.312 415.9438 370.2959 418.6079 C
373.8242 421.3438 L
372.0239 423.6479 L
379.0801 429.1919 L
377.3521 429.8398 L
375.9121 430.5601 L
375.9121 430.5601 L
f1 D
0 g
348.2642 426.0239 m
351.144 424.728 L
347.3281 405.5039 L
344.8799 403.4878 L
351 403.4878 L
353.0879 416.2319 L
356.7598 414 L
356.7598 403.4878 L
362.6641 403.4878 L
360.936 405.5039 L
360.936 425.0879 L
361.8721 426.0239 L
348.2642 426.0239 L
348.2642 426.0239 L
f0 g
352.3682 418.9678 m
358.272 416.4482 L
358.416 422.208 L
356.3281 424.0801 L
356.4722 421.5601 L
353.3042 424.4399 L
352.3682 418.9678 L
352.3682 418.9678 L
f0 D
0 g
325.0078 419.7598 m
325.0078 431.064 L
327.5278 429.8398 328.752 427.3921 328.6802 425.1602 c
328.6079 423.0718 327.3838 420.624 325.0078 419.7598 C
325.0078 419.7598 L
f1 D
0 g
321.1201 406.4399 m
318.0962 403.5601 L
325.1519 403.5601 L
325.1519 417.3838 L
326.9521 415.4399 328.1758 412.4878 327.96 407.2319 c
327.8159 401.9038 323.9282 398.8081 318.8882 398.0161 c
314.4961 397.4399 310.8242 398.9521 307.8721 400.752 C
310.896 397.584 314.3521 396.2158 318.8159 396.2881 c
324.792 396.4321 330.48 401.04 331.272 407.0161 c
331.6318 409.896 331.8481 414.5039 329.9038 416.7358 C
330.4082 415.1519 330.2642 413.7842 329.7598 412.3438 C
328.9678 414.2158 327.96 416.376 326.7358 418.0322 C
330.3359 419.1118 332.1357 421.272 332.1357 425.0879 c
332.064 430.1279 328.1758 433.5122 323.3521 433.5122 c
319.1758 433.5122 L
321.1201 431.856 L
321.1201 406.4399 L
321.1201 406.4399 L
f0 g
295.2002 403.8481 m
297.5762 405.5039 L
297.3599 403.272 296.208 402.3359 294.7681 402.1201 c
293.4722 401.9038 291.96 402.1919 290.52 402.6958 C
292.248 400.4639 294.1919 399.5278 296.1357 399.5278 c
299.0879 399.4561 301.9678 401.4722 304.1279 404.208 c
306.2158 406.7998 307.2241 410.9038 307.2241 414.792 c
307.2959 416.7358 307.0801 418.5361 306.6479 420.1919 C
307.9438 419.4722 308.8799 418.3198 309.5278 417.0239 C
307.728 426.312 303.2642 430.3438 293.9038 430.4878 C
295.2002 428.9038 L
295.2002 403.8481 L
295.2002 403.8481 L
f0 D
0 g
298.5122 406.6563 m
298.5122 426.0962 L
300.8882 425.0161 304.272 419.04 304.416 414.7202 c
304.4878 411.3359 303.4082 407.8799 301.896 404.4961 C
301.8242 406.584 301.4639 407.8081 300.5278 409.6802 C
298.5122 406.6563 L
298.5122 406.6563 L
f0 g
286.5601 431.064 m
285.0479 429.9121 L
289.3682 415.584 L
289.3682 432.3599 L
287.6401 434.0161 L
292.9678 434.0161 L
292.9678 404.064 L
288.144 404.064 L
288.144 410.6162 L
284.688 421.2002 L
284.688 403.416 L
277.5601 403.416 L
279.2881 405.144 L
279.2881 408.4561 L
280.584 409.8242 L
280.584 418.1758 L
282.5278 420.1201 L
282.5278 431.064 L
286.5601 431.064 L
286.5601 431.064 L
f1 D
0 g
268.2002 429.0479 m
270 427.4639 L
270 417.8882 L
268.6318 416.3042 267.48 415.0078 267.624 412.8481 c
267.8398 409.3198 270.144 406.728 273.3838 406.5122 c
274.0322 406.4399 274.752 406.5122 275.5439 406.6563 C
273.7441 408.0962 273.0962 408.4561 273.0239 410.832 C
274.3198 409.6079 275.832 408.96 276.9121 409.0322 c
278.4961 409.104 279.8643 411.1919 279.8643 412.9199 c
279.8643 433.8721 L
273.3838 433.8721 L
275.9038 432.0718 L
275.9038 412.5601 L
275.688 412.0562 275.2559 411.6958 274.8242 411.624 c
273.8882 411.5518 272.7358 412.5601 272.6641 413.6401 C
272.6641 429.0479 L
268.2002 429.0479 L
268.2002 429.0479 L
f0 D
252.4321 434.0879 m
258.624 434.0879 L
258.624 426.312 L
262.4399 422.5679 L
262.4399 429.7681 L
260.856 431.4238 L
266.3281 431.4238 L
266.3281 404.5679 L
260.9282 404.5679 L
262.4399 406.0801 L
262.4399 419.1118 L
258.624 423 L
258.624 405.5039 L
253.2959 405.5039 L
255.312 407.1602 L
255.312 424.0078 L
253.8721 422.3521 L
253.8721 432.6479 L
252.4321 434.0879 L
Bb
1 (GradientFill 2) 316.2598 445 -90 50.3281 1 0 0 1 0 0 Bg
-0.0002 -4342.5078 -153.9038 0 393.4639 4787.5078 Bc
0 -22.1444 -153.9038 0 393.4639 445 Bm
0 -26.6739 -153.9038 0 393.4639 422.8555 Bm
0 -1.5098 -153.9038 0 393.4639 396.1816 Bm
-0.0002 -4342.5078 -153.9038 0 393.4639 394.6719 Bc
f0 BB
*U
*u
0 J 0 j 1 w0 g
383.3999 420.2642 m
383.04 420.2642 L
383.04 420.4082 382.9678 420.5518 382.9678 420.6958 C
383.1118 420.5518 383.2559 420.4082 383.3999 420.2642 C
383.3999 420.2642 L
f1 D
0 g
380.2319 420.2642 m
379.1519 420.9839 377.9282 421.5601 376.7041 421.8481 C
379.1519 424.5122 382.3198 427.5361 384.2642 427.5361 c
389.7358 427.4639 390.0962 422.9282 390.96 420.9121 C
391.4639 423.4321 390.168 428.9761 387.8643 429.2642 c
386.9282 429.4082 385.9922 429.3359 385.1279 429.0479 C
387.3599 430.5601 L
375.9121 430.5601 L
377.3521 429.8398 L
379.0801 429.1919 L
372.0239 423.6479 L
373.8242 421.3438 L
372.3838 420.2642 L
380.2319 420.2642 L
380.2319 420.2642 L
f0 D
0 g
368.2798 420.2642 m
364.248 420.2642 L
364.248 431.1357 L
363.5278 431.4238 362.8799 431.4238 362.376 431.2798 c
360.936 430.9922 360 429.624 358.9922 428.2559 C
359.4238 431.7842 360.936 435.0239 363.8159 437.1841 C
362.9521 435.8159 362.3042 434.8081 363.168 433.2959 C
374.9038 433.2959 L
374.688 429.48 373.6079 427.5361 370.6563 425.1602 C
371.5918 427.0322 371.9521 429.1201 371.6641 431.4961 C
368.2798 431.4961 L
368.2798 420.2642 L
368.2798 420.2642 L
f1 D
0 g
360.936 420.2642 m
360.936 425.0879 L
361.8721 426.0239 L
348.2642 426.0239 L
351.144 424.728 L
350.208 420.2642 L
352.584 420.2642 L
353.3042 424.4399 L
356.4722 421.5601 L
356.3281 424.0801 L
358.416 422.208 L
358.3438 420.2642 L
360.936 420.2642 L
360.936 420.2642 L
f0 D
0 g
340.272 420.2642 m
332.7119 420.2642 L
333.5039 425.0879 335.8799 428.7598 339.48 432.7202 C
336.4561 435.5278 L
342.6479 435.5278 L
339.1919 437.3281 335.0879 438.8398 330.9121 439.4878 C
333.792 440.4961 337.3198 441.144 340.7041 441.0718 c
342.8643 441.0718 345.0239 440.856 346.8242 440.064 C
345.0962 439.7759 L
344.2319 439.272 L
349.7041 436.752 354.5278 432.2881 355.248 426.0962 C
354.0239 428.6162 351.792 431.856 348.5518 431.7119 c
344.7358 431.5679 340.272 425.2319 340.272 420.2642 C
340.272 420.2642 L
f1 D
0 g
330.5518 420.2642 m
331.6318 421.416 332.1357 423 332.1357 425.0879 c
332.064 430.1279 328.1758 433.5122 323.3521 433.5122 c
319.1758 433.5122 L
321.1201 431.856 L
321.1201 420.2642 L
325.0078 420.2642 L
325.0078 431.064 L
327.5278 429.8398 328.752 427.3921 328.6802 425.1602 c
328.6802 423.4321 327.7441 421.3438 326.0161 420.2642 C
330.5518 420.2642 L
330.5518 420.2642 L
f0 D
0 g
317.8799 420.2642 m
316.6563 420.2642 L
317.8799 421.3438 L
317.8799 420.2642 L
317.8799 420.2642 L
f0 g
314.3521 420.2642 m
310.4639 420.2642 L
310.4639 427.6079 L
308.2319 429.5518 L
317.4482 429.5518 L
319.5361 424.728 L
316.2959 426.96 L
312.2642 426.96 L
314.3521 424.7998 L
314.3521 420.2642 L
314.3521 420.2642 L
f1 D
0 g
308.7358 420.2642 m
306.5762 427.248 302.1118 430.3438 293.9038 430.4878 C
295.2002 428.9038 L
295.2002 420.2642 L
298.5122 420.2642 L
298.5122 426.0962 L
299.9521 425.4482 301.752 423 302.9761 420.2642 C
308.7358 420.2642 L
308.7358 420.2642 L
f0 D
0 g
292.9678 420.2642 m
289.3682 420.2642 L
289.3682 432.3599 L
287.6401 434.0161 L
292.9678 434.0161 L
292.9678 420.2642 L
292.9678 420.2642 L
f1 D
0 g
287.9282 420.2642 m
285.0479 429.9121 L
286.5601 431.064 L
282.5278 431.064 L
282.5278 420.2642 L
284.688 420.2642 L
284.688 421.2002 L
284.9761 420.2642 L
287.9282 420.2642 L
287.9282 420.2642 L
f0 D
0 g
279.8643 420.2642 m
275.9038 420.2642 L
275.9038 432.0718 L
273.3838 433.8721 L
279.8643 433.8721 L
279.8643 420.2642 L
279.8643 420.2642 L
f0 g
272.6641 420.2642 m
270 420.2642 L
270 427.4639 L
268.2002 429.0479 L
272.6641 429.0479 L
272.6641 420.2642 L
272.6641 420.2642 L
f0 g
266.3281 420.2642 m
261.3599 420.2642 L
258.624 423 L
258.624 420.2642 L
255.312 420.2642 L
255.312 424.0078 L
253.8721 422.3521 L
253.8721 432.6479 L
252.4321 434.0879 L
258.624 434.0879 L
258.624 426.312 L
262.4399 422.5679 L
262.4399 429.7681 L
260.856 431.4238 L
266.3281 431.4238 L
266.3281 420.2642 L
266.3281 420.2642 L
f1 D
249.5518 420.2642 m
249.5518 432.144 L
250.9199 431.6401 L
250.9199 436.3198 L
255.6001 436.6802 259.8481 435.96 263.6641 434.3042 C
257.1841 440.7842 250.1279 444.4561 242.3521 445.248 C
245.1602 444.0239 247.6802 442.4399 249.7681 440.2798 C
248.1118 441.0718 246.312 441.4321 244.5122 441.4321 C
246.168 440.5679 247.4639 439.6318 248.1841 438.48 C
243.2158 438.48 L
244.2241 437.3999 245.376 436.3198 245.4482 435.168 C
245.4482 420.2642 L
249.5518 420.2642 L
Bb
1 (Unnamed gradient 5) 316.6563 445 -90 25.0302 1 0 0 1 0 0 Bg
-0.0002 -4342.9043 -153.1118 0 393.4639 4787.9043 Bc
0 -25.0302 -153.1118 0 393.4639 445 Bm
-0.0002 -4342.9043 -153.1118 0 393.4639 419.9697 Bc
f0 BB
*U
*u
0 D
0 R
0 0 0 1 K
1 J 1 j 0.5 w241.5601 394.9199 m
244.3682 395.208 249.5518 397.8721 249.5518 402.624 c
249.5518 432.144 L
250.9199 431.6401 L
250.9199 436.3198 L
255.6001 436.6802 259.8481 435.96 263.6641 434.3042 C
257.1841 440.7842 250.1279 444.4561 242.3521 445.248 C
245.1602 444.0239 247.6802 442.4399 249.7681 440.2798 C
248.1118 441.0718 246.312 441.4321 244.5122 441.4321 C
246.168 440.5679 247.4639 439.6318 248.1841 438.48 C
243.2158 438.48 L
244.2241 437.3999 245.376 436.3198 245.4482 435.168 C
245.4482 409.9678 L
246.6001 410.5439 L
245.8799 407.3042 244.6563 404.6401 242.9282 402.48 C
246.0239 403.9922 L
245.52 400.5361 244.0078 397.5122 241.5601 394.9199 C
241.5601 394.9199 L
s310.4639 405.936 m
310.4639 427.6079 L
308.2319 429.5518 L
317.4482 429.5518 L
319.5361 424.728 L
316.2959 426.96 L
312.2642 426.96 L
314.3521 424.7998 L
314.3521 419.5439 L
315.8643 419.5439 L
317.8799 421.3438 L
317.8799 417.6001 L
314.208 417.6001 L
314.208 410.1118 L
316.2959 410.1118 L
319.3921 413.6401 L
319.248 411.48 318.7441 408.0239 317.4482 405.2158 c
316.2241 402.4082 314.1357 400.248 311.6162 400.104 c
310.5361 400.0322 309.168 400.1758 307.8721 401.04 C
310.6802 400.896 311.7598 401.4722 313.272 403.7759 C
306.8643 403.7759 L
310.4639 405.936 L
310.4639 405.936 L
s336.4561 435.5278 m
342.6479 435.5278 L
339.1919 437.3281 335.0879 438.8398 330.9121 439.4878 C
333.792 440.4961 337.3198 441.144 340.7041 441.0718 c
342.8643 441.0718 345.0239 440.856 346.8242 440.064 C
345.0962 439.7759 L
344.2319 439.272 L
349.7041 436.752 354.5278 432.2881 355.248 426.0962 C
354.0239 428.6162 351.792 431.856 348.5518 431.7119 c
344.7358 431.5679 340.2002 425.1602 340.272 420.2642 c
340.272 418.104 340.9922 415.9438 341.6401 414 C
340.1279 415.4399 339.1919 416.2319 338.5439 418.248 C
338.5439 409.8242 343.584 399.0239 352.0801 398.4482 c
356.5439 398.1602 359.1357 400.1758 362.6641 403.272 C
359.6401 399.0239 357.0479 397.0801 351.2881 396.936 c
340.7759 396.792 332.2798 406.1519 332.4961 417.312 c
332.6401 423.7202 335.1602 428.04 339.48 432.7202 C
336.4561 435.5278 L
336.4561 435.5278 L
s358.9922 428.2559 m
359.4238 431.7842 360.936 435.0239 363.8159 437.1841 C
362.9521 435.8159 362.3042 434.8081 363.168 433.2959 C
374.9038 433.2959 L
374.688 429.48 373.6079 427.5361 370.6563 425.1602 C
371.5918 427.0322 371.9521 429.1201 371.6641 431.4961 C
368.2798 431.4961 L
368.2798 405.4321 L
369 402.9839 370.2241 402.0479 372.312 400.8242 C
364.248 400.8242 L
364.248 431.1357 L
363.5278 431.4238 362.8799 431.4238 362.376 431.2798 c
360.936 430.9922 360 429.624 358.9922 428.2559 C
358.9922 428.2559 L
s375.9121 430.5601 m
387.3599 430.5601 L
385.1279 429.0479 L
385.9922 429.3359 386.9282 429.4082 387.8643 429.2642 c
390.168 428.9761 391.4639 423.4321 390.96 420.9121 C
390.0962 422.9282 389.7358 427.4639 384.2642 427.5361 c
382.3198 427.5361 379.1519 424.5122 376.7041 421.8481 C
379.1519 421.3438 381.6001 419.3281 383.5439 417.6719 C
383.6162 418.896 383.3281 419.5439 382.9678 420.6958 C
387 417.4561 388.7998 414.5762 388.3682 409.6079 c
387.7202 402.9839 384.0479 396.936 376.7041 396.8643 c
373.4639 396.792 371.2319 398.0161 369.6479 400.4639 C
370.8721 399.5278 373.5361 397.5122 376.7759 398.0161 c
381.0239 398.5918 384.0479 402.6958 384.0479 407.2319 c
384.0479 411.2642 379.728 415.584 376.0562 416.6641 C
375.48 414.8643 376.272 413.4961 377.2798 411.9839 C
374.5439 414.0718 372.312 415.9438 370.2959 418.6079 C
373.8242 421.3438 L
372.0239 423.6479 L
379.0801 429.1919 L
377.3521 429.8398 L
375.9121 430.5601 L
375.9121 430.5601 L
s348.2642 426.0239 m
361.8721 426.0239 L
360.936 425.0879 L
360.936 405.5039 L
362.6641 403.4878 L
356.7598 403.4878 L
356.7598 414 L
353.0879 416.2319 L
351 403.4878 L
344.8799 403.4878 L
347.3281 405.5039 L
351.144 424.728 L
348.2642 426.0239 L
348.2642 426.0239 L
s352.3682 418.9678 m
353.3042 424.4399 L
356.4722 421.5601 L
356.3281 424.0801 L
358.416 422.208 L
358.272 416.4482 L
352.3682 418.9678 L
352.3682 418.9678 L
s325.0078 419.7598 m
325.0078 431.064 L
327.5278 429.8398 328.752 427.3921 328.6802 425.1602 c
328.6079 423.0718 327.3838 420.624 325.0078 419.7598 C
325.0078 419.7598 L
s321.1201 406.4399 m
321.1201 431.856 L
319.1758 433.5122 L
323.3521 433.5122 l
328.1758 433.5122 332.064 430.1279 332.1357 425.0879 c
332.1357 421.272 330.3359 419.1118 326.7358 418.0322 C
327.96 416.376 328.9678 414.2158 329.7598 412.3438 C
330.2642 413.7842 330.4082 415.1519 329.9038 416.7358 C
331.8481 414.5039 331.6318 409.896 331.272 407.0161 c
330.48 401.04 324.792 396.4321 318.8159 396.2881 c
314.3521 396.2158 310.896 397.584 307.8721 400.752 C
310.8242 398.9521 314.4961 397.4399 318.8882 398.0161 c
323.9282 398.8081 327.8159 401.9038 327.96 407.2319 c
328.1758 412.4878 326.9521 415.4399 325.1519 417.3838 C
325.1519 403.5601 L
318.0962 403.5601 L
321.1201 406.4399 L
321.1201 406.4399 L
s295.2002 403.8481 m
295.2002 428.9038 L
293.9038 430.4878 L
303.2642 430.3438 307.728 426.312 309.5278 417.0239 C
308.8799 418.3198 307.9438 419.4722 306.6479 420.1919 C
307.0801 418.5361 307.2959 416.7358 307.2241 414.792 c
307.2241 410.9038 306.2158 406.7998 304.1279 404.208 c
301.9678 401.4722 299.0879 399.4561 296.1357 399.5278 c
294.1919 399.5278 292.248 400.4639 290.52 402.6958 C
291.96 402.1919 293.4722 401.9038 294.7681 402.1201 c
296.208 402.3359 297.3599 403.272 297.5762 405.5039 C
295.2002 403.8481 L
295.2002 403.8481 L
s298.5122 406.6563 m
298.5122 426.0962 L
300.8882 425.0161 304.272 419.04 304.416 414.7202 c
304.4878 411.3359 303.4082 407.8799 301.896 404.4961 C
301.8242 406.584 301.4639 407.8081 300.5278 409.6802 C
298.5122 406.6563 L
298.5122 406.6563 L
s286.5601 431.064 m
285.0479 429.9121 L
289.3682 415.584 L
289.3682 432.3599 L
287.6401 434.0161 L
292.9678 434.0161 L
292.9678 404.064 L
288.144 404.064 L
288.144 410.6162 L
284.688 421.2002 L
284.688 403.416 L
277.5601 403.416 L
279.2881 405.144 L
279.2881 408.4561 L
280.584 409.8242 L
280.584 418.1758 L
282.5278 420.1201 L
282.5278 431.064 L
286.5601 431.064 L
286.5601 431.064 L
s268.2002 429.0479 m
272.6641 429.0479 L
272.6641 413.6401 L
272.7358 412.5601 273.8882 411.5518 274.8242 411.624 c
275.2559 411.6958 275.688 412.0562 275.9038 412.5601 C
275.9038 432.0718 L
273.3838 433.8721 L
279.8643 433.8721 L
279.8643 412.9199 l
279.8643 411.1919 278.4961 409.104 276.9121 409.0322 c
275.832 408.96 274.3198 409.6079 273.0239 410.832 C
273.0962 408.4561 273.7441 408.0962 275.5439 406.6563 C
274.752 406.5122 274.0322 406.4399 273.3838 406.5122 c
270.144 406.728 267.8398 409.3198 267.624 412.8481 c
267.48 415.0078 268.6318 416.3042 270 417.8882 C
270 427.4639 L
268.2002 429.0479 L
268.2002 429.0479 L
s252.4321 434.0879 m
258.624 434.0879 L
258.624 426.312 L
262.4399 422.5679 L
262.4399 429.7681 L
260.856 431.4238 L
266.3281 431.4238 L
266.3281 404.5679 L
260.9282 404.5679 L
262.4399 406.0801 L
262.4399 419.1118 L
258.624 423 L
258.624 405.5039 L
253.2959 405.5039 L
255.312 407.1602 L
255.312 424.0078 L
253.8721 422.3521 L
253.8721 432.6479 L
252.4321 434.0879 L
s*U
*u
0 O
0.8425 w0 g
242.4961 411.6958 m
245.0161 414.7202 246.312 419.2559 246.3838 423.6479 c
246.5278 426.96 245.9521 430.272 244.3682 432.792 C
243.2158 432 241.9199 431.5679 240.1919 431.2798 c
238.104 430.9199 236.3042 432 234.792 433.5122 C
234.8638 433.728 235.2959 434.0161 235.3682 434.0879 C
236.2319 433.2959 237.8882 431.7119 239.9761 432 c
240.9839 432.2158 244.1519 433.584 244.728 434.8799 C
242.2798 434.7358 237.6001 435.4561 235.4399 435.6001 c
233.856 435.7441 230.3999 435.96 228.7441 435.8882 C
227.1602 435.7441 225.5039 435.8159 223.9199 435.3838 C
221.7598 434.8081 220.5361 433.9438 218.5918 432.8643 C
217.9438 432.4321 217.4399 431.9282 216.7202 431.5679 C
216.5039 431.4238 216.2881 431.3521 216.0718 431.2798 C
214.9199 431.208 208.7998 428.9038 207 427.1758 c
206.9282 427.0322 206.7842 426.8159 206.856 426.7441 c
206.9282 426.6001 207.2158 426.5278 207.4321 426.2402 c
207.5039 426.0962 207.5762 425.8799 207.5762 425.52 C
207.5039 424.3682 207.3599 423 207.8638 421.9922 C
208.1519 421.416 208.7998 421.272 209.0879 420.7681 C
209.376 420.1919 209.3042 419.5439 209.5918 418.9678 C
209.8799 418.248 210.5278 417.6001 211.0322 417.0239 C
211.5361 416.4482 212.9761 415.0801 213.48 414.936 C
212.5439 416.6641 211.6079 417.4561 211.6079 418.896 c
211.4639 423.2158 216.8638 425.1602 220.6802 425.2319 c
223.7041 425.376 225.792 424.1519 225.936 421.0562 C
226.0078 419.3281 225 417.8882 224.2798 416.2319 C
223.9199 415.2959 223.1279 414.5762 222.3359 413.9282 C
221.1118 412.9922 219.6001 411.8398 217.9438 411.7681 c
216.8638 411.7681 215.7119 412.272 214.9199 412.8481 C
214.9199 412.1279 215.856 410.9761 216.3599 410.3999 C
216.6479 410.04 217.1519 409.4639 217.4399 409.104 C
217.8721 408.6719 218.376 408.4561 218.9521 408.312 C
219.6719 408.0239 219.6719 407.7358 220.4639 407.52 C
220.9678 407.376 222.1201 407.2319 222.9839 407.1602 c
225.3599 407.0161 226.9438 408.0239 228.5278 409.752 C
227.6641 409.3198 225.792 409.0322 225.4321 409.3921 C
225.2158 409.4639 225.144 409.8242 225.144 410.1118 C
225 411.5518 226.0078 411.8398 227.0161 412.6318 C
227.7358 413.1357 228.6719 413.5679 229.5361 413.856 C
230.7598 414.2881 233.2798 414.6479 234.4321 415.2241 C
237.0962 416.5918 238.6802 420.0479 238.1758 422.7842 c
237.8882 424.0801 237.312 425.2319 236.4482 426.2402 C
237.2402 426.8882 L
238.248 425.7358 239.04 424.2959 239.3281 422.9282 c
239.7598 420.7681 238.6802 418.1758 237.6001 416.3042 C
239.9761 415.0078 241.9199 412.8481 242.4961 411.6958 C
242.4961 411.6958 L
f218.6641 431.3521 m
218.9521 431.7842 219.7441 432.144 220.4639 432.5762 c
222.1201 433.5122 224.2798 434.3042 225.2881 434.6641 C
225.7202 434.8799 226.4399 435.0239 226.728 434.7358 C
226.7998 434.1602 226.0078 433.8721 225.5762 433.5122 C
225 433.0078 224.3521 432.5039 223.7041 432.144 C
222.9121 431.6401 222.3359 431.208 221.4722 430.8481 C
221.04 430.6318 220.3921 430.5601 219.8882 430.6318 C
219.4561 430.7041 218.4482 430.9199 218.6641 431.3521 C
Bb
1 (GradientFill 2) 226.6201 436 -90 28.8054 1 0 0 1 0 0 Bg
-0.0002 -4252.5801 -43.7437 0 248.5278 4688.5801 Bc
0 -12.6744 -43.7437 0 248.5278 436 Bm
0 -15.2669 -43.7437 0 248.5278 423.3257 Bm
0 -0.8642 -43.7437 0 248.5278 408.0586 Bm
-0.0002 -4252.5801 -43.7437 0 248.5278 407.1948 Bc
f0 BB
*U
*u
0 J 0 j 1 w0 g
246.3838 422.4238 m
246.3838 422.856 246.3838 423.2158 246.3838 423.6479 c
246.5278 426.96 245.9521 430.272 244.3682 432.792 C
243.2158 432 241.9199 431.5679 240.1919 431.2798 c
238.104 430.9199 236.3042 432 234.792 433.5122 C
234.8638 433.728 235.2959 434.0161 235.3682 434.0879 C
236.2319 433.2959 237.8882 431.7119 239.9761 432 c
240.9839 432.2158 244.1519 433.584 244.728 434.8799 C
242.2798 434.7358 237.6001 435.4561 235.4399 435.6001 c
233.856 435.7441 230.3999 435.96 228.7441 435.8882 C
227.1602 435.7441 225.5039 435.8159 223.9199 435.3838 C
221.7598 434.8081 220.5361 433.9438 218.5918 432.8643 C
217.9438 432.4321 217.4399 431.9282 216.7202 431.5679 C
216.5039 431.4238 216.2881 431.3521 216.0718 431.2798 C
214.9199 431.208 208.7998 428.9038 207 427.1758 c
206.9282 427.0322 206.7842 426.8159 206.856 426.7441 c
206.9282 426.6001 207.2158 426.5278 207.4321 426.2402 c
207.5039 426.0962 207.5762 425.8799 207.5762 425.52 C
207.5039 424.584 207.3599 423.4321 207.6479 422.4238 C
213.1201 422.4238 L
214.9199 424.2959 218.1602 425.1602 220.6802 425.2319 c
223.2002 425.376 225 424.5122 225.6479 422.4238 C
238.1758 422.4238 L
238.1758 422.5679 238.1758 422.6401 238.1758 422.7842 c
237.8882 424.0801 237.312 425.2319 236.4482 426.2402 C
237.2402 426.8882 L
238.248 425.7358 239.04 424.2959 239.3281 422.9282 c
239.3999 422.7842 239.3999 422.6401 239.3999 422.4238 C
246.3838 422.4238 L
246.3838 422.4238 L
f218.6641 431.3521 m
218.9521 431.7842 219.7441 432.144 220.4639 432.5762 c
222.1201 433.5122 224.2798 434.3042 225.2881 434.6641 C
225.7202 434.8799 226.4399 435.0239 226.728 434.7358 C
226.7998 434.1602 226.0078 433.8721 225.5762 433.5122 C
225 433.0078 224.3521 432.5039 223.7041 432.144 C
222.9121 431.6401 222.3359 431.208 221.4722 430.8481 C
221.04 430.6318 220.3921 430.5601 219.8882 430.6318 C
219.4561 430.7041 218.4482 430.9199 218.6641 431.3521 C
Bb
1 (Unnamed gradient 6) 226.6201 436 -90 13.4351 1 0 0 1 0 0 Bg
-0.0002 -4252.5801 -43.7437 0 248.5278 4688.5801 Bc
0 -13.4351 -43.7437 0 248.5278 436 Bm
-0.0002 -4252.5801 -43.7437 0 248.5278 422.5649 Bc
f0 BB
*U
*u
0 R
0 0 0 1 K
1 J 1 j 0.5 w242.4961 411.6958 m
245.0161 414.7202 246.312 419.2559 246.3838 423.6479 c
246.5278 426.96 245.9521 430.272 244.3682 432.792 C
243.2158 432 241.9199 431.5679 240.1919 431.2798 c
238.104 430.9199 236.3042 432 234.792 433.5122 C
234.8638 433.728 235.2959 434.0161 235.3682 434.0879 C
236.2319 433.2959 237.8882 431.7119 239.9761 432 c
240.9839 432.2158 244.1519 433.584 244.728 434.8799 C
242.2798 434.7358 237.6001 435.4561 235.4399 435.6001 c
233.856 435.7441 230.3999 435.96 228.7441 435.8882 C
227.1602 435.7441 225.5039 435.8159 223.9199 435.3838 C
221.7598 434.8081 220.5361 433.9438 218.5918 432.8643 C
217.9438 432.4321 217.4399 431.9282 216.7202 431.5679 C
216.5039 431.4238 216.2881 431.3521 216.0718 431.2798 C
214.9199 431.208 208.7998 428.9038 207 427.1758 c
206.9282 427.0322 206.7842 426.8159 206.856 426.7441 c
206.9282 426.6001 207.2158 426.5278 207.4321 426.2402 c
207.5039 426.0962 207.5762 425.8799 207.5762 425.52 C
207.5039 424.3682 207.3599 423 207.8638 421.9922 C
208.1519 421.416 208.7998 421.272 209.0879 420.7681 C
209.376 420.1919 209.3042 419.5439 209.5918 418.9678 C
209.8799 418.248 210.5278 417.6001 211.0322 417.0239 C
211.5361 416.4482 212.9761 415.0801 213.48 414.936 C
212.5439 416.6641 211.6079 417.4561 211.6079 418.896 c
211.4639 423.2158 216.8638 425.1602 220.6802 425.2319 c
223.7041 425.376 225.792 424.1519 225.936 421.0562 C
226.0078 419.3281 225 417.8882 224.2798 416.2319 C
223.9199 415.2959 223.1279 414.5762 222.3359 413.9282 C
221.1118 412.9922 219.6001 411.8398 217.9438 411.7681 c
216.8638 411.7681 215.7119 412.272 214.9199 412.8481 C
214.9199 412.1279 215.856 410.9761 216.3599 410.3999 C
216.6479 410.04 217.1519 409.4639 217.4399 409.104 C
217.8721 408.6719 218.376 408.4561 218.9521 408.312 C
219.6719 408.0239 219.6719 407.7358 220.4639 407.52 C
220.9678 407.376 222.1201 407.2319 222.9839 407.1602 c
225.3599 407.0161 226.9438 408.0239 228.5278 409.752 C
227.6641 409.3198 225.792 409.0322 225.4321 409.3921 C
225.2158 409.4639 225.144 409.8242 225.144 410.1118 C
225 411.5518 226.0078 411.8398 227.0161 412.6318 C
227.7358 413.1357 228.6719 413.5679 229.5361 413.856 C
230.7598 414.2881 233.2798 414.6479 234.4321 415.2241 C
237.0962 416.5918 238.6802 420.0479 238.1758 422.7842 c
237.8882 424.0801 237.312 425.2319 236.4482 426.2402 C
237.2402 426.8882 L
238.248 425.7358 239.04 424.2959 239.3281 422.9282 c
239.7598 420.7681 238.6802 418.1758 237.6001 416.3042 C
239.9761 415.0078 241.9199 412.8481 242.4961 411.6958 C
242.4961 411.6958 L
s218.6641 431.3521 m
218.9521 431.7842 219.7441 432.144 220.4639 432.5762 c
222.1201 433.5122 224.2798 434.3042 225.2881 434.6641 C
225.7202 434.8799 226.4399 435.0239 226.728 434.7358 C
226.7998 434.1602 226.0078 433.8721 225.5762 433.5122 C
225 433.0078 224.3521 432.5039 223.7041 432.144 C
222.9121 431.6401 222.3359 431.208 221.4722 430.8481 C
221.04 430.6318 220.3921 430.5601 219.8882 430.6318 C
219.4561 430.7041 218.4482 430.9199 218.6641 431.3521 C
s*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
